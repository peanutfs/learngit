1.安装git使用:sudo apt-get install git
2.安装完成后配置git的用户名和邮箱（自报家門）:git config --global user.name "your name"
git config --global user.email "your email"
3.创建本地版本库:git init
4.提交文件三部曲:1.git add "filename",2.git commit -m "description info",3.git status 查看当前是否有文件被修改过，git diff 可以查看修改内容.
5.版本回退指令:git log 用于查看提交历史记录，如果记录过多，可以使用git log --pretty=oneline 精简;
git reset --hard HEAD^ 回退到上一个版本，git reset --hard HEAD^^ 回退到上上一版本，git reset --hard HEAD~100 回退到上100个版本，git reset --hard "commit id" 回退到指定版本。git reflog 用于记录每一次的命令，含有commit id.
6.git工作区有一个隐藏目录.git，这个其实是git的版本库，里面存储很多东西，最重要的称为stage(暂存区),还有git为我们自动创建的第一个分支master，以及指向master的一个指针HEAD,git的工作主要分为两个git add 时做的操作其实就是将文件修改添加到暂存区，git commit 提交更改，其实就是将暂存区的所有内容提交到当前分支。
7.关于撤销：a.git checkout -- filename 该指令的意思是将文件放在工作区的修改全部撤销，两种情况，一种是自文件修改后还没有被放到暂存区，那么撤销修改就是回到和版本库一模一样的状态;另一种是已经添加到暂存区后又做了修改，那么撤销修改就是回到添加暂存区后的状态，总之就是让文件回到最近一次git commit或git add的状态。b: git reset HEAD filename 该指令用于已经将文件add到暂存区中那么可用该指令将暂存区中的修改撤销，再使用a指令将工作区的修改撤销。c:如果文件已经提交到本地版本库可以使用版本回退来撤销修改，如果已经放到服务器的版本库上，那就拜拜了。
8.删除文件：rm filename 直接删除文件，两种情况：a.确实要从版本库中将文件删除，那么就是使用git rm将文件删除;b.如果是误删，可以使用git checkout -- filename 将版本库上的文件在放到工作区。
9.远程仓库：首先创建SSH Key.  ssh-keygen -t rsa -C "youremail@example.com"一路回车，在主目录下发现.ssh目录里面有id_rsa和id_rsa.pub两个文件，然后登录github上add ssh key 将id_rsa.pub文件的内容粘贴上去后结束，测试ssh key ssh git@github.com.

9.1.git remote add origin git@github.com:yourgithubname/repositoryname.git,该指令用于将本地库与远程库关联，此时远程库的名字就是origin(默认叫法）也可以换成别的;

    git push -u origin master ,git push 用于把本地库内容推送到远程，实际就是把当前分支master推送到远程，因远程库是空的，当第一次推送master分支时加上了-u参数，用于将本地master分支内容推送至远程新的master分支，还会八本地master分支和远程master
关联起来，以后推送可简化。后期只需要使用git push origin master 即可把最新修改推送至github.
10.从远程库克隆：git clone git@github.com:yourgithubname/repositoryname.git,其实git提供的地址不止一个，还可以用https://github.com/yourgithubname/repositoryname.git这样的地址，git默认使用的是git://使用ssh,但是也可以使用https等其他协议，ssh支持的原生git协议最快。

11.git 分支，查看分支：git branch , 创建分支：git branch <name> ,切换分支：git checkout <name> ，创建+切换分支：git checkout -b <name> ,合并某分支到当前分支：git merge <name> , 删除分支：git branch -d <name>

12.解决分支冲突问题：当分支冲突时因先解决冲突然后再合并分支，git log --graph 可以查看分支合并图，如：git log --graph --pretty=oneline --abbrev-commit

13.分支管理：合并分支时，如果可能git会用Fast Forward 模式，这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast Forward 模式，git 就会在merge时生成一个新的commit，这样，分支就可以记录历史
   git merge --no-ff -m "description" <branch name>
在实际开发中，应该避免在master分支上开发，而应该在dev分支上开发，每个人都有一个自己的分支，时不时向dev分支合并代码即可，到版本发布时再向master分支合并。

14.bug分支：软件开发是出现需要修复的bug可以通过新建一个bug临时分支来修复，修复后，合并分支，然后再将分支删除。当你当前的工作不能提交但你又要解决bug时，可以通过 git stash 将当前的工作现场“存储”起来，等bug解决以后再恢复继续工作，恢复存储的工作现场有两种方式，1：git stash apply,这种恢复方式恢复后stash的内容不会删除，需要用git stash drop来删除，2：git stash pop 恢复的同时把stash的内容也删除了。git stash list用于查看stash的内容。可以多次stash，恢复时先使用git stash list 查看，然后恢复指定的stash-->git stash apply stash@{0}.

15.开发一个新功能，最好新建一个分支，如果需要丢弃一个未被合并的分支，可以通过git branch -D <branch name>

16.多人协作开发的一般模式：a.可以先试图用git push origin branch-name 推送自己的修改，b.如果推送失败，则因为远程分支比你本的要新，需要先用git pull试图合并，c.如果合并有冲突，则先解决冲突，然后本地提交，d.没有冲突或者解决掉冲突后,再用git push origin branch-name 推送即可。注：如果git pull 提示"no tracking infomation",则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name 创建链接关系。
另：查看远程库信息使用git remote -v 本地新建的分钟如果不推送到远程，对其他人就是不可见的。

17.标签管理：发布一个版本时通常现在版本库中打一个标签，这样就唯一确定了大标签时候的版本，标签是版本库的一个快照，标签其实就是指向某个commit的指针，该指针不能移动
创建标签：git tag <tag name> 默认为HEAD(最近一次commit)，也可以指定一个commit idgit tag <tag name> commit id , git tag -a <tagname> -m "description info" 可以指定标签信息，git tag -s <tagname> -m "description info"可以用PGP签名标签，git tag 可以查看所有标签，git show tagname 可以查看指定标签的信息。

18.git push origin <tagname> 可以推送一个本地标签，git push origin --tags 可以推送全部未推送过的本地标签，git tag -d <tagname> 可以删除一个本地标签，如果本地标签已经被推送到远程库，可以先删除本地标签，然后使用git push origin :refs/tags/<tagname> 删除一个远程标签。

19.关于github:如果想在github上贡献代码，可以访问别人项目主页，点击Fork在自己的帐号下克隆一个该项目仓库，再将该项目clone到本地修改后push到远程仓库，然后可以在github上发起一个pull request 给原项目主审核，对方确认后即可贡献代码。

20.  .gitignore文件：有些时候，有些git目录下的文件必须存在但又不能提交它们，就可以将要忽略的文件名填入.gitignore文件中，git就会自动忽略这些文件
     忽略文件的规则是：1.忽略操作系统自动生成的文件，比如缩略图等;2.忽略编译生成的中间文件、可执行文件等，如java编译产生的class文件;3.忽略带有敏感信息的配置文件，如存放口令的配置文件

21.配置别名：git config --global alias.<aliasname> <default name>,--global参数是全局参数，配置git的时候，加上该参数针对当前用户其作用，如果不加，只针对当前仓库起作用。配置文件存放位置：每个仓库的git配置文件都放在.git/config文件中，当前用户的git配置文件放在用户主目录下的一个隐藏文件.gitconfig中，配置和删除别名可以直接修改这两个配置文件。
